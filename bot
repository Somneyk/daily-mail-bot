import requests
from bs4 import BeautifulSoup
import time
import asyncio
from telegram import Bot
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TELEGRAM_TOKEN", "8027287214:AAFmDK7QjA_Muzx0hDK56oIm5lpoM5ASsD4")
CHAT_ID = int(os.getenv("CHAT_ID", "-1002596103738"))

URL = "https://www.dailymail.co.uk"
posted_urls = set()
bot = Bot(token=TOKEN)

def get_daily_mail_news():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36'
    }
    try:
        response = requests.get(URL, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'lxml')

        articles = soup.select('article article a[href^="/"]')[:10]
        news_list = []

        for article in articles:
            title_elem = article.find(['h2', 'h3']) or article.find_parent().find(['h2', 'h3'])
            if not title_elem:
                continue

            title = title_elem.get_text(strip=True)
            href = article.get('href')
            if not href or len(title) < 10:
                continue

            full_url = "https://www.dailymail.co.uk" + href if href.startswith('/') else href
            if full_url in posted_urls:
                continue

            img = article.find('img') or article.find_parent().find('img')
            image_url = None
            if img:
                image_url = img.get('data-src') or img.get('srcset') or img.get('src')
                if image_url and not image_url.startswith('http'):
                    image_url = "https://www.dailymail.co.uk" + image_url

            news_list.append({
                "title": title,
                "url": full_url,
                "image": image_url
            })
            posted_urls.add(full_url)

        return news_list

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Daily Mail: {e}")
        return []

async def send_news_to_telegram():
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ Daily Mail...")
    news_list = get_daily_mail_news()
    if not news_list:
        print("üì≠ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    for item in news_list:
        message = f"üóû *{item['title']}*\n\n[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({item['url']})"

        try:
            if item['image']:
                await bot.send_photo(
                    chat_id=CHAT_ID,
                    photo=item['image'],
                    caption=message,
                    parse_mode='Markdown'
                )
            else:
                await bot.send_message(
                    chat_id=CHAT_ID,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {item['title'][:50]}...")
            await asyncio.sleep(2)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç...")
    while True:
        await send_news_to_telegram()
        print("üí§ –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...\n")
        await asyncio.sleep(1800)

if __name__ == "__main__":
    asyncio.run(main())
